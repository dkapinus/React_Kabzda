{"ast":null,"code":"export const students = [{\n  id: 1,\n  name: \"Bob\"\n}, {\n  id: 2,\n  name: \"Alex\"\n}, {\n  id: 3,\n  name: \"Ann\"\n}, {\n  id: 4,\n  name: \"Charley\"\n}];\nexport const friends = {\n  1: [\"Oliver\", \"Jack\", \"Oscar\"],\n  2: [\"Jack\", \"Lewis\", \"Thomas\"],\n  3: [\"William\", \"Michael\", \"Lewis\"],\n  4: [\"Oscar\", \"James\", \"William\"]\n};\nconst getMutualFriends = (st_1, st_2) => {\n  const result = [];\n  friends[st_1.id].forEach(f => friends[st_2.id].includes(f) ? result.push(f) : null);\n  return result;\n};\n\n//Дан массив студентов и структура,\n//которая содержит список друзей каждого из студентов.\n// Так же дана функция  getMutualFriends, проверяющая наличие общих друзей\n// у двух выбранных студентов.\n//Функция принимает параметром два объекта типа StudentType\n// и возвращает массив с именами общих друзей,\n//если они есть и пустой массив, если таковых нету.\n// Что надо написать вместо ххх, чтобы функция работала?","map":{"version":3,"names":["students","id","name","friends","getMutualFriends","st_1","st_2","result","forEach","f","includes","push"],"sources":["/Users/viktoriakapinus/Documents/React_Kabzda/src/index.tsx"],"sourcesContent":["type StudentType = {\n    id: number\n    name: string\n}\n\ntype FriendsType = {\n    [key: string]: Array<string>\n}\n\nexport const students: Array<StudentType> = [\n    {id: 1, name: \"Bob\"},\n    {id: 2, name: \"Alex\"},\n    {id: 3, name: \"Ann\"},\n    {id: 4, name: \"Charley\"},\n]\n\nexport const friends: FriendsType = {\n    1: [\"Oliver\", \"Jack\", \"Oscar\",],\n    2: [\"Jack\", \"Lewis\", \"Thomas\",],\n    3: [\"William\", \"Michael\", \"Lewis\",],\n    4: [\"Oscar\", \"James\", \"William\",],\n}\n\nconst getMutualFriends = (st_1: StudentType, st_2: StudentType,) => {\n    const result: Array<string> = []\n    friends[st_1.id].forEach(f => friends[st_2.id].includes(f)? result.push(f): null)\n    return result\n}\n\n//Дан массив студентов и структура,\n//которая содержит список друзей каждого из студентов.\n// Так же дана функция  getMutualFriends, проверяющая наличие общих друзей\n// у двух выбранных студентов.\n//Функция принимает параметром два объекта типа StudentType\n// и возвращает массив с именами общих друзей,\n//если они есть и пустой массив, если таковых нету.\n// Что надо написать вместо ххх, чтобы функция работала?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"AASA,OAAO,MAAMA,QAA4B,GAAG,CACxC;EAACC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAK,CAAC,EACpB;EAACD,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAM,CAAC,EACrB;EAACD,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAK,CAAC,EACpB;EAACD,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAS,CAAC,CAC3B;AAED,OAAO,MAAMC,OAAoB,GAAG;EAChC,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAE;EAC/B,CAAC,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAE;EAC/B,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAE;EACnC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS;AACnC,CAAC;AAED,MAAMC,gBAAgB,GAAG,CAACC,IAAiB,EAAEC,IAAiB,KAAM;EAChE,MAAMC,MAAqB,GAAG,EAAE;EAChCJ,OAAO,CAACE,IAAI,CAACJ,EAAE,CAAC,CAACO,OAAO,CAACC,CAAC,IAAIN,OAAO,CAACG,IAAI,CAACL,EAAE,CAAC,CAACS,QAAQ,CAACD,CAAC,CAAC,GAAEF,MAAM,CAACI,IAAI,CAACF,CAAC,CAAC,GAAE,IAAI,CAAC;EACjF,OAAOF,MAAM;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}