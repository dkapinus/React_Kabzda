{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/React_Kabzda/src/ReactMemo/ReactUseMemo.stories.tsx\",\n  _s = $RefreshSig$();\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar __STORY__ = \"import React, { useState} from 'react';\\n\\n\\nexport default {\\n    title: 'React UseMemo',\\n\\n}\\n\\n\\nexport const Example = () => {\\n    const [a, setA] = useState<number>(5);\\n    const [b, setB] = useState<number>(5)\\n\\n\\n    let resultA = 1\\n    let resultB = 1\\n\\n    for (let i = 1; i <= a; i++) {\\n        resultA = resultA * i\\n        let fake =0\\n        while (fake<1000000000000){\\n            fake++\\n            const x = Math.random()\\n        }\\n    }\\n    for (let i = 1; i <= b; i++) {\\n        resultB = resultB * i\\n\\n    }\\n        return (\\n            <>\\n                <input value={a} onChange={(e) => setA(Number(e.currentTarget.value))}/>\\n                <input value={b} onChange={(e) => setB(Number(e.currentTarget.value))}/>\\n                <div>\\n                    result A: {resultA}\\n                </div>\\n                <div>\\n                    result B: {resultB}\\n                </div>\\n            </>\\n        )\\n    }\";\n// @ts-ignore\nvar __LOCATIONS_MAP__ = {\n  \"Example\": {\n    \"startLoc\": {\n      \"col\": 23,\n      \"line\": 10\n    },\n    \"endLoc\": {\n      \"col\": 5,\n      \"line\": 42\n    },\n    \"startBody\": {\n      \"col\": 23,\n      \"line\": 10\n    },\n    \"endBody\": {\n      \"col\": 5,\n      \"line\": 42\n    }\n  }\n};\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default {\n  title: 'React UseMemo'\n};\nexport const Example = () => {\n  _s();\n  const [a, setA] = useState(5);\n  const [b, setB] = useState(5);\n  let resultA = 1;\n  let resultB = 1;\n  for (let i = 1; i <= a; i++) {\n    resultA = resultA * i;\n    let fake = 0;\n    while (fake < 1000000000000) {\n      fake++;\n      const x = Math.random();\n    }\n  }\n  for (let i = 1; i <= b; i++) {\n    resultB = resultB * i;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: a,\n      onChange: e => setA(Number(e.currentTarget.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: b,\n      onChange: e => setB(Number(e.currentTarget.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"result A: \", resultA]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"result B: \", resultB]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(Example, \"o+lP7/fqcYGgZrobNscyilrJ/wk=\");\n_c = Example;\nExample.parameters = {\n  storySource: {\n    source: \"() => {\\n    const [a, setA] = useState<number>(5);\\n    const [b, setB] = useState<number>(5)\\n\\n\\n    let resultA = 1\\n    let resultB = 1\\n\\n    for (let i = 1; i <= a; i++) {\\n        resultA = resultA * i\\n        let fake =0\\n        while (fake<1000000000000){\\n            fake++\\n            const x = Math.random()\\n        }\\n    }\\n    for (let i = 1; i <= b; i++) {\\n        resultB = resultB * i\\n\\n    }\\n        return (\\n            <>\\n                <input value={a} onChange={(e) => setA(Number(e.currentTarget.value))}/>\\n                <input value={b} onChange={(e) => setB(Number(e.currentTarget.value))}/>\\n                <div>\\n                    result A: {resultA}\\n                </div>\\n                <div>\\n                    result B: {resultB}\\n                </div>\\n            </>\\n        )\\n    }\"\n  },\n  ...Example.parameters\n};\nvar _c;\n$RefreshReg$(_c, \"Example\");\nexport const __namedExportsOrder = [\"Example\"];","map":{"version":3,"names":["__STORY__","__LOCATIONS_MAP__","React","useState","title","Example","a","setA","b","setB","resultA","resultB","i","fake","x","Math","random","e","Number","currentTarget","value","parameters","storySource","source"],"sources":["/Users/viktoriakapinus/Documents/React_Kabzda/src/ReactMemo/ReactUseMemo.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState} from 'react';\\n\\n\\nexport default {\\n    title: 'React UseMemo',\\n\\n}\\n\\n\\nexport const Example = () => {\\n    const [a, setA] = useState<number>(5);\\n    const [b, setB] = useState<number>(5)\\n\\n\\n    let resultA = 1\\n    let resultB = 1\\n\\n    for (let i = 1; i <= a; i++) {\\n        resultA = resultA * i\\n        let fake =0\\n        while (fake<1000000000000){\\n            fake++\\n            const x = Math.random()\\n        }\\n    }\\n    for (let i = 1; i <= b; i++) {\\n        resultB = resultB * i\\n\\n    }\\n        return (\\n            <>\\n                <input value={a} onChange={(e) => setA(Number(e.currentTarget.value))}/>\\n                <input value={b} onChange={(e) => setB(Number(e.currentTarget.value))}/>\\n                <div>\\n                    result A: {resultA}\\n                </div>\\n                <div>\\n                    result B: {resultB}\\n                </div>\\n            </>\\n        )\\n    }\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Example\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":5,\"line\":42},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":5,\"line\":42}}};\n    \nimport React, { useState} from 'react';\n\n\nexport default {\n    title: 'React UseMemo',\n\n}\n\n\nexport const Example = () => {\n    const [a, setA] = useState<number>(5);\n    const [b, setB] = useState<number>(5)\n\n\n    let resultA = 1\n    let resultB = 1\n\n    for (let i = 1; i <= a; i++) {\n        resultA = resultA * i\n        let fake =0\n        while (fake<1000000000000){\n            fake++\n            const x = Math.random()\n        }\n    }\n    for (let i = 1; i <= b; i++) {\n        resultB = resultB * i\n\n    }\n        return (\n            <>\n                <input value={a} onChange={(e) => setA(Number(e.currentTarget.value))}/>\n                <input value={b} onChange={(e) => setB(Number(e.currentTarget.value))}/>\n                <div>\n                    result A: {resultA}\n                </div>\n                <div>\n                    result B: {resultB}\n                </div>\n            </>\n        )\n    };\n\n\nExample.parameters = { storySource: { source: \"() => {\\n    const [a, setA] = useState<number>(5);\\n    const [b, setB] = useState<number>(5)\\n\\n\\n    let resultA = 1\\n    let resultB = 1\\n\\n    for (let i = 1; i <= a; i++) {\\n        resultA = resultA * i\\n        let fake =0\\n        while (fake<1000000000000){\\n            fake++\\n            const x = Math.random()\\n        }\\n    }\\n    for (let i = 1; i <= b; i++) {\\n        resultB = resultB * i\\n\\n    }\\n        return (\\n            <>\\n                <input value={a} onChange={(e) => setA(Number(e.currentTarget.value))}/>\\n                <input value={b} onChange={(e) => setB(Number(e.currentTarget.value))}/>\\n                <div>\\n                    result A: {resultA}\\n                </div>\\n                <div>\\n                    result B: {resultB}\\n                </div>\\n            </>\\n        )\\n    }\" }, ...Example.parameters };"],"mappings":";;AACI;AACA;AACA;AACA,IAAIA,SAAS,GAAG,y8BAAy8B;AACz9B;AACA,IAAIC,iBAAiB,GAAG;EAAC,SAAS,EAAC;IAAC,UAAU,EAAC;MAAC,KAAK,EAAC,EAAE;MAAC,MAAM,EAAC;IAAE,CAAC;IAAC,QAAQ,EAAC;MAAC,KAAK,EAAC,CAAC;MAAC,MAAM,EAAC;IAAE,CAAC;IAAC,WAAW,EAAC;MAAC,KAAK,EAAC,EAAE;MAAC,MAAM,EAAC;IAAE,CAAC;IAAC,SAAS,EAAC;MAAC,KAAK,EAAC,CAAC;MAAC,MAAM,EAAC;IAAE;EAAC;AAAC,CAAC;AAErK,OAAOC,KAAK,IAAIC,QAAQ,QAAO,OAAO;AAAC;AAAA;AAGvC,eAAe;EACXC,KAAK,EAAE;AAEX,CAAC;AAGD,OAAO,MAAMC,OAAO,GAAG,MAAM;EAAA;EACzB,MAAM,CAACC,CAAC,EAAEC,IAAI,CAAC,GAAGJ,QAAQ,CAAS,CAAC,CAAC;EACrC,MAAM,CAACK,CAAC,EAAEC,IAAI,CAAC,GAAGN,QAAQ,CAAS,CAAC,CAAC;EAGrC,IAAIO,OAAO,GAAG,CAAC;EACf,IAAIC,OAAO,GAAG,CAAC;EAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIN,CAAC,EAAEM,CAAC,EAAE,EAAE;IACzBF,OAAO,GAAGA,OAAO,GAAGE,CAAC;IACrB,IAAIC,IAAI,GAAE,CAAC;IACX,OAAOA,IAAI,GAAC,aAAa,EAAC;MACtBA,IAAI,EAAE;MACN,MAAMC,CAAC,GAAGC,IAAI,CAACC,MAAM,EAAE;IAC3B;EACJ;EACA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIJ,CAAC,EAAEI,CAAC,EAAE,EAAE;IACzBD,OAAO,GAAGA,OAAO,GAAGC,CAAC;EAEzB;EACI,oBACI;IAAA,wBACI;MAAO,KAAK,EAAEN,CAAE;MAAC,QAAQ,EAAGW,CAAC,IAAKV,IAAI,CAACW,MAAM,CAACD,CAAC,CAACE,aAAa,CAACC,KAAK,CAAC;IAAE;MAAA;MAAA;MAAA;IAAA,QAAE,eACxE;MAAO,KAAK,EAAEZ,CAAE;MAAC,QAAQ,EAAGS,CAAC,IAAKR,IAAI,CAACS,MAAM,CAACD,CAAC,CAACE,aAAa,CAACC,KAAK,CAAC;IAAE;MAAA;MAAA;MAAA;IAAA,QAAE,eACxE;MAAA,yBACeV,OAAO;IAAA;MAAA;MAAA;MAAA;IAAA,QAChB,eACN;MAAA,yBACeC,OAAO;IAAA;MAAA;MAAA;MAAA;IAAA,QAChB;EAAA,gBACP;AAEX,CAAC;AAAC,GAhCON,OAAO;AAAA,KAAPA,OAAO;AAmCpBA,OAAO,CAACgB,UAAU,GAAG;EAAEC,WAAW,EAAE;IAAEC,MAAM,EAAE;EAA80B,CAAC;EAAE,GAAGlB,OAAO,CAACgB;AAAW,CAAC;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}