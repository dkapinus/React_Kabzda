{"version":3,"file":"main.c51f289c2b44935d4c68.hot-update.js","mappingsaA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AATA;AAWA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AATA;AAWA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAjBA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://untitled/./src/Input.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import {ChangeEvent, useRef, useState} from \\\"react\\\";\\n\\n\\nexport default {\\n    title: 'input',\\n\\n}\\n\\nexport const ControllerInput = () => <input value={1}/>\\nexport const TrackerInput = () => {\\n    const [tracker, setTracker] = useState('')\\n\\n    return (<><input onChange={(e) => setTracker(e.currentTarget.value)}/> -{tracker}</>)\\n}\\n\\n\\nexport const InputDifferent = () => {\\n    const inputRef = useRef<HTMLInputElement>(null)\\n    const [value, setValue] = useState('')\\n\\n    const inputValue = () => {\\n        const e = inputRef.current as HTMLInputElement\\n        setValue(e.value)\\n    }\\n\\n    return (<><input ref={inputRef}/><button onClick={inputValue}>Text</button> -{value}</>)\\n}\\n\\n\\nexport const ControlledInput = ()=>{\\nconst [value,setValue]=useState('')\\n\\n\\n    const onChange =(e:ChangeEvent<HTMLInputElement>)=> {\\n    setValue(e.currentTarget.value)\\n    }\\n    return (<input value={value} onChange={onChange}/>)\\n\\n}\\n\\nexport const ControlledInputCheckbox = ()=>{\\n    const [value,setValue]=useState(false)\\n\\n    const changeStatus = (e:boolean)=> {\\n        setValue(e)\\n    }\\n\\n    return (<input type={'checkbox'} checked={value} onClick={(event)=>changeStatus(event.currentTarget.checked)}/>)\\n\\n}\\n\\nexport const ControlledSelect = ()=>{\\n    const [value,setValue]=useState<string|undefined>(undefined)\\n\\n\\n    const onChange =(e:ChangeEvent<HTMLInputElement>)=> {\\n        setValue(e.currentTarget.value)\\n    }\\n\\n    return <select value={value} onChange={onChange}>\\n        <option>none</option>\\n        <option>Minsk</option>\\n        <option>Vienna</option>\\n        <option>Pha</option>\\n    </select>\\n\\n\\n\\n}\\n\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"ControllerInput\":{\"startLoc\":{\"col\":31,\"line\":9},\"endLoc\":{\"col\":55,\"line\":9},\"startBody\":{\"col\":31,\"line\":9},\"endBody\":{\"col\":55,\"line\":9}},\"TrackerInput\":{\"startLoc\":{\"col\":28,\"line\":10},\"endLoc\":{\"col\":1,\"line\":14},\"startBody\":{\"col\":28,\"line\":10},\"endBody\":{\"col\":1,\"line\":14}},\"InputDifferent\":{\"startLoc\":{\"col\":30,\"line\":17},\"endLoc\":{\"col\":1,\"line\":27},\"startBody\":{\"col\":30,\"line\":17},\"endBody\":{\"col\":1,\"line\":27}},\"ControlledInput\":{\"startLoc\":{\"col\":31,\"line\":30},\"endLoc\":{\"col\":1,\"line\":39},\"startBody\":{\"col\":31,\"line\":30},\"endBody\":{\"col\":1,\"line\":39}},\"ControlledInputCheckbox\":{\"startLoc\":{\"col\":39,\"line\":41},\"endLoc\":{\"col\":1,\"line\":50},\"startBody\":{\"col\":39,\"line\":41},\"endBody\":{\"col\":1,\"line\":50}},\"ControlledSelect\":{\"startLoc\":{\"col\":32,\"line\":52},\"endLoc\":{\"col\":1,\"line\":69},\"startBody\":{\"col\":32,\"line\":52},\"endBody\":{\"col\":1,\"line\":69}}};\n    \nimport {ChangeEvent, useRef, useState} from \"react\";\n\n\nexport default {\n    title: 'input',\n\n}\n\nexport const ControllerInput = () => <input value={1}/>;\nexport const TrackerInput = () => {\n    const [tracker, setTracker] = useState('')\n\n    return (<><input onChange={(e) => setTracker(e.currentTarget.value)}/> -{tracker}</>)\n};\n\n\nexport const InputDifferent = () => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const [value, setValue] = useState('')\n\n    const inputValue = () => {\n        const e = inputRef.current as HTMLInputElement\n        setValue(e.value)\n    }\n\n    return (<><input ref={inputRef}/><button onClick={inputValue}>Text</button> -{value}</>)\n};\n\n\nexport const ControlledInput = ()=>{\nconst [value,setValue]=useState('')\n\n\n    const onChange =(e:ChangeEvent<HTMLInputElement>)=> {\n    setValue(e.currentTarget.value)\n    }\n    return (<input value={value} onChange={onChange}/>)\n\n};\n\nexport const ControlledInputCheckbox = ()=>{\n    const [value,setValue]=useState(false)\n\n    const changeStatus = (e:boolean)=> {\n        setValue(e)\n    }\n\n    return (<input type={'checkbox'} checked={value} onClick={(event)=>changeStatus(event.currentTarget.checked)}/>)\n\n};\n\nexport const ControlledSelect = ()=>{\n    const [value,setValue]=useState<string|undefined>(undefined)\n\n\n    const onChange =(e:ChangeEvent<HTMLInputElement>)=> {\n        setValue(e.currentTarget.value)\n    }\n\n    return <select value={value} onChange={onChange}>\n        <option>none</option>\n        <option>Minsk</option>\n        <option>Vienna</option>\n        <option>Pha</option>\n    </select>\n\n\n\n};\n\n\n\nControllerInput.parameters = { storySource: { source: \"() => <input value={1}/>\" }, ...ControllerInput.parameters };\nTrackerInput.parameters = { storySource: { source: \"() => {\\n    const [tracker, setTracker] = useState('')\\n\\n    return (<><input onChange={(e) => setTracker(e.currentTarget.value)}/> -{tracker}</>)\\n}\" }, ...TrackerInput.parameters };\nInputDifferent.parameters = { storySource: { source: \"() => {\\n    const inputRef = useRef<HTMLInputElement>(null)\\n    const [value, setValue] = useState('')\\n\\n    const inputValue = () => {\\n        const e = inputRef.current as HTMLInputElement\\n        setValue(e.value)\\n    }\\n\\n    return (<><input ref={inputRef}/><button onClick={inputValue}>Text</button> -{value}</>)\\n}\" }, ...InputDifferent.parameters };\nControlledInput.parameters = { storySource: { source: \"()=>{\\nconst [value,setValue]=useState('')\\n\\n\\n    const onChange =(e:ChangeEvent<HTMLInputElement>)=> {\\n    setValue(e.currentTarget.value)\\n    }\\n    return (<input value={value} onChange={onChange}/>)\\n\\n}\" }, ...ControlledInput.parameters };\nControlledInputCheckbox.parameters = { storySource: { source: \"()=>{\\n    const [value,setValue]=useState(false)\\n\\n    const changeStatus = (e:boolean)=> {\\n        setValue(e)\\n    }\\n\\n    return (<input type={'checkbox'} checked={value} onClick={(event)=>changeStatus(event.currentTarget.checked)}/>)\\n\\n}\" }, ...ControlledInputCheckbox.parameters };\nControlledSelect.parameters = { storySource: { source: \"()=>{\\n    const [value,setValue]=useState<string|undefined>(undefined)\\n\\n\\n    const onChange =(e:ChangeEvent<HTMLInputElement>)=> {\\n        setValue(e.currentTarget.value)\\n    }\\n\\n    return <select value={value} onChange={onChange}>\\n        <option>none</option>\\n        <option>Minsk</option>\\n        <option>Vienna</option>\\n        <option>Pha</option>\\n    </select>\\n\\n\\n\\n}\" }, ...ControlledSelect.parameters };"],"names":[],"sourceRoot":""}