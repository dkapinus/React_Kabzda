{"version":3,"file":"main.9b7b1ca6704c04b3bd14.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AAGA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAvCA;AAiDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://untitled/./src/stories/clock.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {useEffect, useState} from \\\"react\\\";\\n\\nexport default {\\n    title: 'Clock ',\\n\\n}\\n\\n\\nexport const Clock = () => {\\n\\n\\n    const [date, setDate] = useState<Date>(new Date((Date.now())))\\n\\n\\n\\n    useEffect( () => {\\n        setInterval(() => {\\n            setDate(new Date())\\n        }, 1000)\\n\\n    },[])\\n\\n\\n    let formatterTime = new Intl.DateTimeFormat(\\\"ru\\\", {\\n\\n        second:\\\"numeric\\\"\\n    });\\n\\n\\n    const stringTime = `${formatterTime.format(date)}`\\n    return (\\n        <div>\\n             <span>\\n                   {date.getHours()}\\n                </span>\\n:\\n                <span>\\n                   {date.getMinutes()}\\n                </span>\\n            :\\n            <span>\\n                   {stringTime}\\n                </span>\\n\\n\\n        </div>\\n    )\\n}\\n\\n\\n\\n\\n\\n\\n\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Clock\":{\"startLoc\":{\"col\":21,\"line\":9},\"endLoc\":{\"col\":1,\"line\":48},\"startBody\":{\"col\":21,\"line\":9},\"endBody\":{\"col\":1,\"line\":48}}};\n    \nimport React, {useEffect, useState} from \"react\";\n\nexport default {\n    title: 'Clock ',\n\n}\n\n\nexport const Clock = () => {\n\n\n    const [date, setDate] = useState<Date>(new Date((Date.now())))\n\n\n\n    useEffect( () => {\n        setInterval(() => {\n            setDate(new Date())\n        }, 1000)\n\n    },[])\n\n\n    let formatterTime = new Intl.DateTimeFormat(\"ru\", {\n\n        second:\"numeric\"\n    });\n\n\n    const stringTime = `${formatterTime.format(date)}`\n    return (\n        <div>\n             <span>\n                   {date.getHours()}\n                </span>\n:\n                <span>\n                   {date.getMinutes()}\n                </span>\n            :\n            <span>\n                   {stringTime}\n                </span>\n\n\n        </div>\n    )\n};\n\n\n\n\n\n\n\n\n\nClock.parameters = { storySource: { source: \"() => {\\n\\n\\n    const [date, setDate] = useState<Date>(new Date((Date.now())))\\n\\n\\n\\n    useEffect( () => {\\n        setInterval(() => {\\n            setDate(new Date())\\n        }, 1000)\\n\\n    },[])\\n\\n\\n    let formatterTime = new Intl.DateTimeFormat(\\\"ru\\\", {\\n\\n        second:\\\"numeric\\\"\\n    });\\n\\n\\n    const stringTime = `${formatterTime.format(date)}`\\n    return (\\n        <div>\\n             <span>\\n                   {date.getHours()}\\n                </span>\\n:\\n                <span>\\n                   {date.getMinutes()}\\n                </span>\\n            :\\n            <span>\\n                   {stringTime}\\n                </span>\\n\\n\\n        </div>\\n    )\\n}\" }, ...Clock.parameters };"],"names":[],"sourceRoot":""}