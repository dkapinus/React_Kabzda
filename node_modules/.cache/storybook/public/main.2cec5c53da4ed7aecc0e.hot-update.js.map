{"version":3,"file":"main.2cec5c53da4ed7aecc0e.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AAGA;AAAA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AApCA;AA8CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://untitled/./src/stories/clock.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {useEffect, useState} from \\\"react\\\";\\n\\nexport default {\\n    title: 'Clock ',\\n\\n}\\n\\n\\nexport const Clock = () => {\\n\\n\\n    const [date, setDate] = useState<Date>(new Date((Date.now())))\\n\\n\\n    useEffect(() => {\\n        console.log('tick')\\n\\n        const intervalID = setInterval(() => {\\n            setDate(new Date())\\n        }, 1000)\\n\\n        return clearInterval(intervalID)\\n\\n\\n    }, [])\\n\\n\\n    let formatterTime = new Intl.DateTimeFormat(\\\"ru\\\", {\\n        hour: \\\"numeric\\\",\\n        minute: \\\"numeric\\\",\\n        second: \\\"numeric\\\"\\n    });\\n\\n    const stringTime = `${formatterTime.format(date)}`\\n    return (\\n        <div>\\n\\n            <span>\\n                   {stringTime}\\n                </span>\\n\\n\\n        </div>\\n    )\\n}\\n\\n\\n\\n\\n\\n\\n\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Clock\":{\"startLoc\":{\"col\":21,\"line\":9},\"endLoc\":{\"col\":1,\"line\":45},\"startBody\":{\"col\":21,\"line\":9},\"endBody\":{\"col\":1,\"line\":45}}};\n    \nimport React, {useEffect, useState} from \"react\";\n\nexport default {\n    title: 'Clock ',\n\n}\n\n\nexport const Clock = () => {\n\n\n    const [date, setDate] = useState<Date>(new Date((Date.now())))\n\n\n    useEffect(() => {\n        console.log('tick')\n\n        const intervalID = setInterval(() => {\n            setDate(new Date())\n        }, 1000)\n\n        return clearInterval(intervalID)\n\n\n    }, [])\n\n\n    let formatterTime = new Intl.DateTimeFormat(\"ru\", {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\"\n    });\n\n    const stringTime = `${formatterTime.format(date)}`\n    return (\n        <div>\n\n            <span>\n                   {stringTime}\n                </span>\n\n\n        </div>\n    )\n};\n\n\n\n\n\n\n\n\n\nClock.parameters = { storySource: { source: \"() => {\\n\\n\\n    const [date, setDate] = useState<Date>(new Date((Date.now())))\\n\\n\\n    useEffect(() => {\\n        console.log('tick')\\n\\n        const intervalID = setInterval(() => {\\n            setDate(new Date())\\n        }, 1000)\\n\\n        return clearInterval(intervalID)\\n\\n\\n    }, [])\\n\\n\\n    let formatterTime = new Intl.DateTimeFormat(\\\"ru\\\", {\\n        hour: \\\"numeric\\\",\\n        minute: \\\"numeric\\\",\\n        second: \\\"numeric\\\"\\n    });\\n\\n    const stringTime = `${formatterTime.format(date)}`\\n    return (\\n        <div>\\n\\n            <span>\\n                   {stringTime}\\n                </span>\\n\\n\\n        </div>\\n    )\\n}\" }, ...Clock.parameters };"],"names":[],"sourceRoot":""}